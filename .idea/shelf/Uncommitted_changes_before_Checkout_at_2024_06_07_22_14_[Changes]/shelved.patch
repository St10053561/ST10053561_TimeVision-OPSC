Index: app/src/main/java/com/example/timevision_application/ProjectDetailActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.timevision_application\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.widget.Button\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.anychart.AnyChartView\r\nimport com.bumptech.glide.Glide\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.database.DataSnapshot\r\nimport com.google.firebase.database.DatabaseError\r\nimport com.google.firebase.database.FirebaseDatabase\r\nimport com.google.firebase.database.ValueEventListener\r\n\r\n@Suppress(\"NAME_SHADOWING\")\r\nclass ProjectDetailActivity : AppCompatActivity() {\r\n\r\n    // Declare hoursMap as a member variable\r\n    private val hoursMap = HashMap<String, MutableList<Int>>()\r\n\r\n    // Declare currentMonthOffset as a member variable\r\n    private var currentMonthOffset = 0\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_project_detail)\r\n\r\n        val projectName: TextView = findViewById(R.id.projectName)\r\n        val projectCategory: TextView = findViewById(R.id.projectCategory)\r\n        val description: TextView = findViewById(R.id.description)\r\n        val hours: TextView = findViewById(R.id.hours)\r\n        val userPhoto: ImageView = findViewById(R.id.userPhoto)\r\n        val projectDate: TextView = findViewById(R.id.projectDate)\r\n\r\n// Show instructions to the user\r\n        val instructions = \"To view the results for a specific month:\\n\\n\" +\r\n                \"1. Click on 'Current Month' to view the current month's results.\\n\" +\r\n                \"2. Click on 'Previous Month' to view the previous month's results.\\n\\n\" +\r\n                \"Please note: To switch between months, you need to exit the project and come back.\"\r\n        AlertDialog.Builder(this)\r\n            .setTitle(\"Instructions\")\r\n            .setMessage(instructions)\r\n            .setPositiveButton(\"OK\") { dialog, _ -> dialog.dismiss() }\r\n            .show()\r\n\r\n        val project = intent.getSerializableExtra(\"project\") as? Project\r\n\r\n        if (project != null) {\r\n            projectName.text = project.projectName\r\n            projectCategory.text = projectCategory.text.toString() + project.category\r\n            description.text = description.text.toString() + \"\\n\" + project.workDescription\r\n            hours.text =\r\n                hours.text.toString() + \"${project.minimumDailyHours} - ${project.maximumDailyHours}\"\r\n            projectDate.text = projectDate.text.toString() + project.date\r\n\r\n            val anyChartView: AnyChartView = findViewById(R.id.any_chart_view)\r\n\r\n            // Check if the project has an imageUrl\r\n            if (project.imageUrl.isNotEmpty()) {\r\n                // Use Glide to load the image into the ImageView\r\n                Glide.with(this)\r\n                    .load(project.imageUrl)\r\n                    .into(userPhoto)\r\n            } else {\r\n                // Set a default image or make the ImageView invisible\r\n                userPhoto.setImageResource(R.drawable.person)\r\n            }\r\n            // Get references to the buttons\r\n            val currentMonthButton: Button = findViewById(R.id.currentMonthButton)\r\n            val previousMonthButton: Button = findViewById(R.id.previousMonthButton)\r\n\r\n\r\n            currentMonthButton.setOnClickListener {\r\n                currentMonthOffset = 0\r\n                Log.d(\r\n                    \"Button Click\",\r\n                    \"Current Month Button clicked. currentMonthOffset set to $currentMonthOffset\"\r\n                )\r\n                setupChartForCurrentOffset()\r\n            }\r\n\r\n            previousMonthButton.setOnClickListener {\r\n                currentMonthOffset -= 1\r\n                Log.d(\r\n                    \"Button Click\",\r\n                    \"Previous Month Button clicked. currentMonthOffset set to $currentMonthOffset\"\r\n                )\r\n                setupChartForCurrentOffset()\r\n            }\r\n            // Get the current user ID\r\n            val currentUserId = FirebaseAuth.getInstance().currentUser?.uid\r\n            val database = FirebaseDatabase.getInstance().getReference(\"TimeSheetEntries\")\r\n\r\n            database.child(currentUserId!!).addValueEventListener(object : ValueEventListener {\r\n                override fun onDataChange(dataSnapshot: DataSnapshot) {\r\n                    // Check if hoursMap is empty before generating random hours\r\n                    if (hoursMap.isEmpty()) {\r\n                        for (projectSnapshot in dataSnapshot.children) {\r\n                            val project = projectSnapshot.getValue(Project::class.java)\r\n                            if (project != null) {\r\n                                val minHours = project.minimumDailyHours.toInt()\r\n                                val maxHours = project.maximumDailyHours.toInt()\r\n\r\n                                // Get or create the list associated with the current project's ID\r\n                                val hoursList =\r\n                                    hoursMap.getOrPut(projectSnapshot.key!!) { MutableList(7) { 0 } }\r\n\r\n                                // Generate a random number of hours within the range of minHours and maxHours for each day of the week\r\n                                for (i in 0 until 7) {\r\n                                    val randomHours = (minHours..maxHours).random()\r\n                                    hoursList[i] = randomHours\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    setupChartForCurrentOffset()\r\n\r\n                    // Setup the initial chart with the current project date\r\n                    project?.date?.let { setupChartForCurrentOffset() }\r\n\r\n\r\n                }\r\n\r\n\r\n                override fun onCancelled(databaseError: DatabaseError) {\r\n                    // Handle possible errors.\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    private fun setupChartForCurrentOffset() {\r\n        Log.d(\"Chart Setup\", \"Setting up chart for currentMonthOffset $currentMonthOffset\")\r\n        for ((projectId, originalHoursList) in hoursMap) {\r\n            val anyChartView: AnyChartView = findViewById(R.id.any_chart_view)\r\n            anyChartView.clear() // Clear the chart\r\n            val project = intent.getSerializableExtra(\"project\") as? Project\r\n            if (project != null) {\r\n                val minHours = project.minimumDailyHours.toInt()\r\n                val maxHours = project.maximumDailyHours.toInt()\r\n\r\n                // Generate random hours for each week when currentMonthOffset is less than 0\r\n                val hours =\r\n                    if (currentMonthOffset < 0) MutableList(4) { (minHours..maxHours).random() } else originalHoursList\r\n\r\n                // Log the values of currentMonthOffset, hours, and originalHoursList\r\n                Log.d(\"Chart Setup\", \"currentMonthOffset: $currentMonthOffset\")\r\n                Log.d(\"Chart Setup\", \"hours: $hours\")\r\n                Log.d(\"Chart Setup\", \"originalHoursList: $originalHoursList\")\r\n\r\n                ChartsActivity.ChartUtils.setupLineChart(\r\n                    anyChartView,\r\n                    hours,\r\n                    minHours,\r\n                    maxHours,\r\n                    project.date,\r\n                    currentMonthOffset\r\n                )\r\n            }\r\n        }\r\n    }\r\n}
===================================================================
diff --git a/app/src/main/java/com/example/timevision_application/ProjectDetailActivity.kt b/app/src/main/java/com/example/timevision_application/ProjectDetailActivity.kt
--- a/app/src/main/java/com/example/timevision_application/ProjectDetailActivity.kt	
+++ b/app/src/main/java/com/example/timevision_application/ProjectDetailActivity.kt	
@@ -3,10 +3,8 @@
 import android.annotation.SuppressLint
 import android.os.Bundle
 import android.util.Log
-import android.widget.Button
 import android.widget.ImageView
 import android.widget.TextView
-import androidx.appcompat.app.AlertDialog
 import androidx.appcompat.app.AppCompatActivity
 import com.anychart.AnyChartView
 import com.bumptech.glide.Glide
@@ -15,16 +13,13 @@
 import com.google.firebase.database.DatabaseError
 import com.google.firebase.database.FirebaseDatabase
 import com.google.firebase.database.ValueEventListener
+import com.google.firebase.storage.ktx.storage
+import com.google.firebase.ktx.Firebase
 
-@Suppress("NAME_SHADOWING")
 class ProjectDetailActivity : AppCompatActivity() {
 
-    // Declare hoursMap as a member variable
     private val hoursMap = HashMap<String, MutableList<Int>>()
 
-    // Declare currentMonthOffset as a member variable
-    private var currentMonthOffset = 0
-
     @SuppressLint("SetTextI18n")
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
@@ -36,17 +31,7 @@
         val hours: TextView = findViewById(R.id.hours)
         val userPhoto: ImageView = findViewById(R.id.userPhoto)
         val projectDate: TextView = findViewById(R.id.projectDate)
-
-// Show instructions to the user
-        val instructions = "To view the results for a specific month:\n\n" +
-                "1. Click on 'Current Month' to view the current month's results.\n" +
-                "2. Click on 'Previous Month' to view the previous month's results.\n\n" +
-                "Please note: To switch between months, you need to exit the project and come back."
-        AlertDialog.Builder(this)
-            .setTitle("Instructions")
-            .setMessage(instructions)
-            .setPositiveButton("OK") { dialog, _ -> dialog.dismiss() }
-            .show()
+        val anyChartView: AnyChartView = findViewById(R.id.any_chart_view)
 
         val project = intent.getSerializableExtra("project") as? Project
 
@@ -54,63 +39,21 @@
             projectName.text = project.projectName
             projectCategory.text = projectCategory.text.toString() + project.category
             description.text = description.text.toString() + "\n" + project.workDescription
-            hours.text =
-                hours.text.toString() + "${project.minimumDailyHours} - ${project.maximumDailyHours}"
+            hours.text = hours.text.toString() + "${project.minimumDailyHours} - ${project.maximumDailyHours}"
             projectDate.text = projectDate.text.toString() + project.date
 
-            val anyChartView: AnyChartView = findViewById(R.id.any_chart_view)
-
-            // Check if the project has an imageUrl
-            if (project.imageUrl.isNotEmpty()) {
-                // Use Glide to load the image into the ImageView
-                Glide.with(this)
-                    .load(project.imageUrl)
-                    .into(userPhoto)
-            } else {
-                // Set a default image or make the ImageView invisible
-                userPhoto.setImageResource(R.drawable.person)
-            }
-            // Get references to the buttons
-            val currentMonthButton: Button = findViewById(R.id.currentMonthButton)
-            val previousMonthButton: Button = findViewById(R.id.previousMonthButton)
+            val currentUserId = FirebaseAuth.getInstance().currentUser?.uid ?: return
 
-
-            currentMonthButton.setOnClickListener {
-                currentMonthOffset = 0
-                Log.d(
-                    "Button Click",
-                    "Current Month Button clicked. currentMonthOffset set to $currentMonthOffset"
-                )
-                setupChartForCurrentOffset()
-            }
-
-            previousMonthButton.setOnClickListener {
-                currentMonthOffset -= 1
-                Log.d(
-                    "Button Click",
-                    "Previous Month Button clicked. currentMonthOffset set to $currentMonthOffset"
-                )
-                setupChartForCurrentOffset()
-            }
-            // Get the current user ID
-            val currentUserId = FirebaseAuth.getInstance().currentUser?.uid
             val database = FirebaseDatabase.getInstance().getReference("TimeSheetEntries")
-
-            database.child(currentUserId!!).addValueEventListener(object : ValueEventListener {
+            database.child(currentUserId).addValueEventListener(object : ValueEventListener {
                 override fun onDataChange(dataSnapshot: DataSnapshot) {
-                    // Check if hoursMap is empty before generating random hours
                     if (hoursMap.isEmpty()) {
                         for (projectSnapshot in dataSnapshot.children) {
                             val project = projectSnapshot.getValue(Project::class.java)
                             if (project != null) {
                                 val minHours = project.minimumDailyHours.toInt()
                                 val maxHours = project.maximumDailyHours.toInt()
-
-                                // Get or create the list associated with the current project's ID
-                                val hoursList =
-                                    hoursMap.getOrPut(projectSnapshot.key!!) { MutableList(7) { 0 } }
-
-                                // Generate a random number of hours within the range of minHours and maxHours for each day of the week
+                                val hoursList = hoursMap.getOrPut(projectSnapshot.key!!) { MutableList(7) { 0 } }
                                 for (i in 0 until 7) {
                                     val randomHours = (minHours..maxHours).random()
                                     hoursList[i] = randomHours
@@ -119,50 +62,29 @@
                         }
                     }
 
-                    setupChartForCurrentOffset()
-
-                    // Setup the initial chart with the current project date
-                    project?.date?.let { setupChartForCurrentOffset() }
-
+                    for ((projectId, hoursList) in hoursMap) {
 
+                        ChartsActivity.ChartUtils.setupLineChart(anyChartView, hoursList)
+                    }
                 }
-
 
                 override fun onCancelled(databaseError: DatabaseError) {
-                    // Handle possible errors.
+                    Log.e("ProjectDetailActivity", "Error loading data: ${databaseError.message}")
                 }
             })
+
+            // Check if project contains image URL
+            if (!project.imageUrl.isNullOrEmpty()) {
+                val imageUrl = project.imageUrl
+                Glide.with(this)
+                    .load(imageUrl)
+                    .into(userPhoto)
+            } else {
+                userPhoto.setImageResource(R.drawable.ic_add_image)
+            }
         }
     }
-
-    private fun setupChartForCurrentOffset() {
-        Log.d("Chart Setup", "Setting up chart for currentMonthOffset $currentMonthOffset")
-        for ((projectId, originalHoursList) in hoursMap) {
-            val anyChartView: AnyChartView = findViewById(R.id.any_chart_view)
-            anyChartView.clear() // Clear the chart
-            val project = intent.getSerializableExtra("project") as? Project
-            if (project != null) {
-                val minHours = project.minimumDailyHours.toInt()
-                val maxHours = project.maximumDailyHours.toInt()
+}
 
-                // Generate random hours for each week when currentMonthOffset is less than 0
-                val hours =
-                    if (currentMonthOffset < 0) MutableList(4) { (minHours..maxHours).random() } else originalHoursList
 
-                // Log the values of currentMonthOffset, hours, and originalHoursList
-                Log.d("Chart Setup", "currentMonthOffset: $currentMonthOffset")
-                Log.d("Chart Setup", "hours: $hours")
-                Log.d("Chart Setup", "originalHoursList: $originalHoursList")
 
-                ChartsActivity.ChartUtils.setupLineChart(
-                    anyChartView,
-                    hours,
-                    minHours,
-                    maxHours,
-                    project.date,
-                    currentMonthOffset
-                )
-            }
-        }
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/example/timevision_application/ChartsActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.timevision_application\r\n\r\nimport android.icu.text.SimpleDateFormat\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.anychart.AnyChart\r\nimport com.anychart.AnyChartView\r\nimport com.anychart.chart.common.dataentry.DataEntry\r\nimport com.anychart.chart.common.dataentry.ValueDataEntry\r\nimport com.anychart.charts.Cartesian\r\nimport com.anychart.core.cartesian.series.Line\r\nimport com.anychart.data.Mapping\r\nimport java.util.*\r\n\r\nclass ChartsActivity : AppCompatActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_chart)\r\n    }\r\n\r\n    object ChartUtils {\r\n        fun setupLineChart(\r\n            anyChartView: AnyChartView,\r\n            hoursList: List<Int>,\r\n            minHours: Int,\r\n            maxHours: Int,\r\n            projectDate: String,\r\n            monthOffset: Int\r\n        ) {\r\n            Log.d(\r\n                \"Chart Setup\",\r\n                \"Setting up chart in ChartsActivity. Received monthOffset: $monthOffset\"\r\n            )\r\n            anyChartView.clear()\r\n            val cartesian: Cartesian = AnyChart.line()\r\n            val data: MutableList<DataEntry> = ArrayList()\r\n            val daysOfWeek = listOf(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\")\r\n            val weeksOfMonth = listOf(\"Week 1\", \"Week 2\", \"Week 3\", \"Week 4\")\r\n\r\n            val labels = if (monthOffset < 0) weeksOfMonth else daysOfWeek\r\n            for ((index, label) in labels.withIndex()) {\r\n                val hours =\r\n                    if (index < hoursList.size) hoursList[index] else 0 // Default value if hoursList is not long enough\r\n                data.add(ValueDataEntry(label, hours))\r\n            }\r\n\r\n\r\n            val set: com.anychart.data.Set = com.anychart.data.Set.instantiate()\r\n            set.data(data)\r\n            val lineData: Mapping = set.mapAs(\"{ x: 'x', value: 'value' }\")\r\n            val series: Line = cartesian.line(lineData)\r\n            series.stroke(\"blue\", 2f, \"10 5\", \"round\", \"round\")\r\n\r\n            // Create data for min and max lines\r\n            val minLineData = labels.map { ValueDataEntry(it, minHours) }\r\n            val maxLineData = labels.map { ValueDataEntry(it, maxHours) }\r\n            cartesian.line(minLineData).stroke(\"2 red\")\r\n            cartesian.line(maxLineData).stroke(\"2 green\")\r\n\r\n            // Update the chart title\r\n            updateChartTitle(cartesian, projectDate, monthOffset)\r\n\r\n            cartesian.xAxis(0).title(if (monthOffset < 0) \"Weeks\" else \"Days\")\r\n            cartesian.yAxis(0).title(\"Hours\")\r\n            cartesian.yScale().ticks().interval(1)\r\n            cartesian.tooltip().enabled(true)\r\n            anyChartView.setChart(cartesian)\r\n        }\r\n\r\n        private fun updateChartTitle(cartesian: Cartesian, projectDate: String, monthOffset: Int) {\r\n            // Parse the project date to get the month name\r\n            val inputFormat = SimpleDateFormat(\"d/M/yyyy\", Locale.ENGLISH)\r\n            val outputFormat = SimpleDateFormat(\"MMMM\", Locale.ENGLISH)\r\n            val date = inputFormat.parse(projectDate)\r\n            val calendar = Calendar.getInstance()\r\n            calendar.time = date\r\n            calendar.add(Calendar.MONTH, monthOffset)\r\n            val monthName = outputFormat.format(calendar.time)\r\n\r\n            cartesian.title(if (monthOffset < 0) \"$monthName Weeks Data\" else \"$monthName Days Data\")\r\n        }\r\n    }\r\n}\r\n\r\n\r\n
===================================================================
diff --git a/app/src/main/java/com/example/timevision_application/ChartsActivity.kt b/app/src/main/java/com/example/timevision_application/ChartsActivity.kt
--- a/app/src/main/java/com/example/timevision_application/ChartsActivity.kt	
+++ b/app/src/main/java/com/example/timevision_application/ChartsActivity.kt	
@@ -1,8 +1,7 @@
 package com.example.timevision_application
 
-import android.icu.text.SimpleDateFormat
+
 import android.os.Bundle
-import android.util.Log
 import androidx.appcompat.app.AppCompatActivity
 import com.anychart.AnyChart
 import com.anychart.AnyChartView
@@ -11,76 +10,57 @@
 import com.anychart.charts.Cartesian
 import com.anychart.core.cartesian.series.Line
 import com.anychart.data.Mapping
-import java.util.*
+import kotlin.random.Random
 
 class ChartsActivity : AppCompatActivity() {
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_chart)
+
+
     }
 
     object ChartUtils {
-        fun setupLineChart(
-            anyChartView: AnyChartView,
-            hoursList: List<Int>,
-            minHours: Int,
-            maxHours: Int,
-            projectDate: String,
-            monthOffset: Int
-        ) {
-            Log.d(
-                "Chart Setup",
-                "Setting up chart in ChartsActivity. Received monthOffset: $monthOffset"
-            )
-            anyChartView.clear()
+        // Function to set up the line chart
+        fun setupLineChart(anyChartView: AnyChartView, hoursList: List<Int>) {
+            // Create a line chart
             val cartesian: Cartesian = AnyChart.line()
+
+            // Initialize a list to store the data entries for the chart
             val data: MutableList<DataEntry> = ArrayList()
+            // List of days of the week
             val daysOfWeek = listOf("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
-            val weeksOfMonth = listOf("Week 1", "Week 2", "Week 3", "Week 4")
-
-            val labels = if (monthOffset < 0) weeksOfMonth else daysOfWeek
-            for ((index, label) in labels.withIndex()) {
-                val hours =
-                    if (index < hoursList.size) hoursList[index] else 0 // Default value if hoursList is not long enough
-                data.add(ValueDataEntry(label, hours))
+            // Loop through each day of the week
+            for ((index, day) in daysOfWeek.withIndex()) {
+                // Add a new data entry for each day with the hours from the hoursList
+                data.add(ValueDataEntry(day, hoursList[index]))
             }
 
-
+            // Create a set of data and add the data entries to it
             val set: com.anychart.data.Set = com.anychart.data.Set.instantiate()
             set.data(data)
+
+            // Map the data for the line chart
             val lineData: Mapping = set.mapAs("{ x: 'x', value: 'value' }")
+            // Create a line series with the mapped data
             val series: Line = cartesian.line(lineData)
+
+            // Set the stroke settings for the line
             series.stroke("blue", 2f, "10 5", "round", "round")
 
-            // Create data for min and max lines
-            val minLineData = labels.map { ValueDataEntry(it, minHours) }
-            val maxLineData = labels.map { ValueDataEntry(it, maxHours) }
-            cartesian.line(minLineData).stroke("2 red")
-            cartesian.line(maxLineData).stroke("2 green")
+            // Set the title of the chart
+            cartesian.title("Weekly Category Data")
 
-            // Update the chart title
-            updateChartTitle(cartesian, projectDate, monthOffset)
-
-            cartesian.xAxis(0).title(if (monthOffset < 0) "Weeks" else "Days")
+            // Set the title of the x-axis and y-axis
+            cartesian.xAxis(0).title("Days")
             cartesian.yAxis(0).title("Hours")
-            cartesian.yScale().ticks().interval(1)
+
+            // Enable tooltips for the chart
             cartesian.tooltip().enabled(true)
+
+            // Set the chart in the AnyChartView
             anyChartView.setChart(cartesian)
         }
-
-        private fun updateChartTitle(cartesian: Cartesian, projectDate: String, monthOffset: Int) {
-            // Parse the project date to get the month name
-            val inputFormat = SimpleDateFormat("d/M/yyyy", Locale.ENGLISH)
-            val outputFormat = SimpleDateFormat("MMMM", Locale.ENGLISH)
-            val date = inputFormat.parse(projectDate)
-            val calendar = Calendar.getInstance()
-            calendar.time = date
-            calendar.add(Calendar.MONTH, monthOffset)
-            val monthName = outputFormat.format(calendar.time)
-
-            cartesian.title(if (monthOffset < 0) "$monthName Weeks Data" else "$monthName Days Data")
-        }
     }
-}
-
 
+}
\ No newline at end of file
