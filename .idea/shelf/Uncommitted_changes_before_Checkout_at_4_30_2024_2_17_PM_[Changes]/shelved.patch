Index: app/src/main/java/com/example/timevision_application/Register.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.timevision_application\r\n\r\nimport android.os.Bundle\r\nimport android.util.Patterns\r\nimport android.view.KeyEvent\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport androidx.activity.enableEdgeToEdge\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.ViewCompat\r\nimport androidx.core.view.WindowInsetsCompat\r\nimport com.example.timevision_application.databinding.ActivityMainBinding\r\nimport com.google.android.material.datepicker.CalendarConstraints\r\nimport com.google.android.material.datepicker.MaterialDatePicker\r\nimport com.google.android.material.textfield.TextInputEditText\r\nimport com.google.android.material.textfield.TextInputLayout\r\nimport com.google.firebase.database.DatabaseReference\r\nimport com.google.firebase.database.FirebaseDatabase\r\nimport java.util.*\r\n\r\nclass Register : AppCompatActivity(), View.OnClickListener, View.OnFocusChangeListener, View.OnKeyListener {\r\n    //Declaring Input Fields\r\n    private lateinit var nameInput: TextInputEditText\r\n    private lateinit var dateOfBirthInput: TextInputEditText\r\n    private lateinit var surnameInput: TextInputEditText\r\n    private lateinit var emailInput: TextInputEditText\r\n    private lateinit var usernameInput: TextInputEditText\r\n    private lateinit var passwordInput: TextInputEditText\r\n    private lateinit var confirmPasswordInput: TextInputEditText\r\n\r\n    //A variable to store the entered password\r\n    private lateinit var storePassword: String\r\n\r\n    //Declaring variables for data binding and Database transmigration\r\n    private lateinit var bind: ActivityMainBinding\r\n    private lateinit var database: DatabaseReference\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        enableEdgeToEdge()\r\n        setContentView(R.layout.activity_register)\r\n\r\n        // Initialize input fields\r\n        nameInput = findViewById(R.id.nameInput)\r\n        dateOfBirthInput = findViewById(R.id.dateOfBirthInput)\r\n        surnameInput = findViewById(R.id.surnameInput)\r\n        emailInput = findViewById(R.id.emailInput)\r\n        usernameInput = findViewById(R.id.usernameInput)\r\n        passwordInput = findViewById(R.id.passwordInput)\r\n        confirmPasswordInput = findViewById(R.id.confirmpasswordInput)\r\n\r\n        // Set up onFocusChangeListener for input fields\r\n        nameInput.onFocusChangeListener = this\r\n        surnameInput.onFocusChangeListener = this\r\n        dateOfBirthInput.onFocusChangeListener = this\r\n        emailInput.onFocusChangeListener = this\r\n        usernameInput.onFocusChangeListener = this\r\n        passwordInput.onFocusChangeListener = this\r\n        confirmPasswordInput.onFocusChangeListener = this\r\n\r\n        // Set onClickListener for the back button\r\n        val backButton = findViewById<Button>(R.id.backButton)\r\n        backButton.setOnClickListener {\r\n            onBackPressed()\r\n        }\r\n\r\n        // Apply edge-to-edge display\r\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.register_main)) { v, insets ->\r\n            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\r\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)\r\n            insets\r\n        }\r\n\r\n        // Set up click listener for dateOfBirthInput\r\n        dateOfBirthInput.setOnClickListener {\r\n            showDatePicker()\r\n        }\r\n\r\n        // Set up click listener for signUpBtn\r\n        val signUpBtn = findViewById<Button>(R.id.signUpBtn)\r\n        signUpBtn.setOnClickListener {\r\n            if (validateInputs()) {\r\n                saveUserToDatabase(\r\n                    nameInput.text.toString(),\r\n                    surnameInput.text.toString(),\r\n                    emailInput.text.toString(),\r\n                    usernameInput.text.toString(),\r\n                    dateOfBirthInput.text.toString()\r\n                )\r\n            }\r\n        }\r\n\r\n        // Initialize database reference\r\n        database = FirebaseDatabase.getInstance().reference\r\n    }\r\n\r\n    //A method to show the DatePicker\r\n    private fun showDatePicker() {\r\n        val builder = MaterialDatePicker.Builder.datePicker()\r\n\r\n        // Set the constraints to allow dates between 1900 and the current date (2024)\r\n        val constraintsBuilder = CalendarConstraints.Builder()\r\n        val minDate = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\")).apply {\r\n            set(Calendar.YEAR, 1900)\r\n        }.timeInMillis // Set minimum date to January 1, 1900\r\n        val maxDate = MaterialDatePicker.todayInUtcMilliseconds() // Set maximum date to current date (2024)\r\n        constraintsBuilder.setStart(minDate)\r\n        constraintsBuilder.setEnd(maxDate)\r\n        builder.setCalendarConstraints(constraintsBuilder.build())\r\n\r\n        val picker = builder.build()\r\n\r\n        picker.addOnPositiveButtonClickListener { selection ->\r\n            // Convert selection to a Calendar instance\r\n            val calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"))\r\n            calendar.timeInMillis = selection\r\n\r\n            // Format the selected date\r\n            val dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH)\r\n            val month = calendar.get(Calendar.MONTH) + 1 // Month is zero-based\r\n            val year = calendar.get(Calendar.YEAR)\r\n\r\n            val selectedDate = \"$dayOfMonth/$month/$year\"\r\n\r\n            // Set the formatted date to dateOfBirthInput\r\n            dateOfBirthInput.setText(selectedDate)\r\n        }\r\n        picker.show(supportFragmentManager, picker.toString())\r\n    }\r\n\r\n    // Method to validate all input fields\r\n    private fun validateInputs(): Boolean {\r\n        return validateFullName() && validateSurname() && CheckForDate() &&\r\n                validateEmail() && validateUsername() && validatePassword() &&\r\n                validateConfirmPassword()\r\n    }\r\n\r\n    // Method to save user information to the database\r\n    private fun saveUserToDatabase(name: String, surname: String, email: String, username: String, dateOfBirth: String) {\r\n        val userId = UUID.randomUUID().toString() // Generate a unique ID for the user\r\n\r\n        // Calculate age\r\n        val age = calculateAge(dateOfBirth)\r\n\r\n        val userData = Users(name, surname, age.toString(), email, username, storePassword)\r\n        database.child(\"users\").child(userId).setValue(userData)\r\n    }\r\n\r\n    // Method to calculate age from date of birth\r\n    private fun calculateAge(dateOfBirth: String): Int {\r\n        val dobParts = dateOfBirth.split(\"/\")\r\n        val dobDay = dobParts[0].toInt()\r\n        val dobMonth = dobParts[1].toInt()\r\n        val dobYear = dobParts[2].toInt()\r\n\r\n        val cal = Calendar.getInstance()\r\n        val currentYear = cal.get(Calendar.YEAR)\r\n        val currentMonth = cal.get(Calendar.MONTH) + 1\r\n        val currentDay = cal.get(Calendar.DAY_OF_MONTH)\r\n\r\n        var age = currentYear - dobYear\r\n\r\n        if (currentMonth < dobMonth || (currentMonth == dobMonth && currentDay < dobDay)) {\r\n            age--\r\n        }\r\n\r\n        return age\r\n    }\r\n\r\n    //A method to validate the Name\r\n    private fun validateFullName(): Boolean {\r\n        var errorMessage: String? = null\r\n        val name: String = nameInput.text.toString()\r\n\r\n        if (name.isNullOrEmpty()) {\r\n            errorMessage = \"Full Name Required\"\r\n        }\r\n        if (errorMessage != null) {\r\n            // Accessing the TextInputLayout associated with nameInput\r\n            val nameInputLayout = nameInput.parent.parent as TextInputLayout\r\n            nameInputLayout.isErrorEnabled = true\r\n            nameInputLayout.error = errorMessage\r\n        }\r\n        return errorMessage == null\r\n    }\r\n\r\n    //A method to validate the Surname\r\n    private fun validateSurname(): Boolean {\r\n        var errorMessage: String? = null\r\n        val surname: String = surnameInput.text.toString()\r\n\r\n        if (surname.isNullOrEmpty()) {\r\n            errorMessage = \"Full Surname Required\"\r\n        }\r\n        if (errorMessage != null) {\r\n            // Access the TextInputLayout associated with nameInput\r\n            val nameInputLayout = surnameInput.parent.parent as TextInputLayout\r\n            nameInputLayout.isErrorEnabled = true\r\n            nameInputLayout.error = errorMessage\r\n        }\r\n        return errorMessage == null\r\n    }\r\n\r\n    //A method to Check if the User Selected A Date\r\n    private fun CheckForDate(): Boolean {\r\n        var errorMessage: String? = null\r\n        val datePresent: String = dateOfBirthInput.text.toString()\r\n\r\n        if (datePresent.isNullOrEmpty()) {\r\n            errorMessage = \"Select Date Of Birth\"\r\n        }\r\n        if (errorMessage != null) {\r\n            // Access the TextInputLayout associated with nameInput\r\n            val nameInputLayout = dateOfBirthInput.parent.parent as TextInputLayout\r\n            nameInputLayout.isErrorEnabled = true\r\n            nameInputLayout.error = errorMessage\r\n        }\r\n        return errorMessage == null\r\n    }\r\n\r\n    //A method to validate the Email\r\n    private fun validateEmail(): Boolean {\r\n        var errorMessage: String? = null\r\n        val email: String = emailInput.text.toString()\r\n\r\n        if (email.isNullOrEmpty()) {\r\n            errorMessage = \"Full Email is Required\"\r\n        } else if (!Patterns.EMAIL_ADDRESS.matcher(email).matches()) {\r\n            errorMessage = \"Email Is InValid\"\r\n        }\r\n        if (errorMessage != null) {\r\n            // Access the TextInputLayout associated with nameInput\r\n            val nameInputLayout = emailInput.parent.parent as TextInputLayout\r\n            nameInputLayout.isErrorEnabled = true\r\n            nameInputLayout.error = errorMessage\r\n        }\r\n        return errorMessage == null\r\n    }\r\n\r\n    //A method to validate the Username\r\n    private fun validateUsername(): Boolean {\r\n        var errorMessage: String? = null\r\n        val username: String = usernameInput.text.toString()\r\n\r\n        if (username.isNullOrEmpty()) {\r\n            errorMessage = \"A Username is Required\"\r\n        }\r\n        if (errorMessage != null) {\r\n            // Access the TextInputLayout associated with nameInput\r\n            val nameInputLayout = usernameInput.parent.parent as TextInputLayout\r\n            nameInputLayout.isErrorEnabled = true\r\n            nameInputLayout.error = errorMessage\r\n        }\r\n\r\n        return errorMessage == null\r\n    }\r\n\r\n    //A method to validate the Password\r\n    private fun validatePassword(): Boolean {\r\n        var errorMessage: String? = null\r\n        val password: String = passwordInput.text.toString()\r\n\r\n        if (password.isNullOrEmpty()) {\r\n            errorMessage = \"A Password is Required\"\r\n        } else if (password.length < 8) {\r\n            errorMessage = \"The password must be a minimum of 8 characters long\"\r\n        } else if (!password.any { it.isUpperCase() }) {\r\n            errorMessage = \"The password must contain an uppercase letter\"\r\n        } else if (!password.any { it.isLowerCase() }) {\r\n            errorMessage = \"The password must contain a lowercase letter\"\r\n        } else if (!password.any { it.isDigit() }) {\r\n            errorMessage = \"The password must contain a digit\"\r\n        } else if (!password.any { !it.isLetterOrDigit() }) {\r\n            errorMessage = \"The password must contain a special character\"\r\n        }\r\n        if (errorMessage != null) {\r\n            // Access the TextInputLayout associated with nameInput\r\n            val nameInputLayout = passwordInput.parent.parent as TextInputLayout\r\n            nameInputLayout.isErrorEnabled = true\r\n            nameInputLayout.error = errorMessage\r\n        }\r\n        storePassword = password\r\n        return errorMessage == null\r\n    }\r\n\r\n    //A method to validate the Confirm Password\r\n    private fun validateConfirmPassword(): Boolean {\r\n        var errorMessage: String? = null\r\n        val confirmPassword: String = confirmPasswordInput.text.toString()\r\n\r\n        if (confirmPassword.isNullOrEmpty()) {\r\n            errorMessage = \"Password Confirmation is Required\"\r\n        }\r\n        if (!confirmPassword.equals(storePassword)) {\r\n            errorMessage = \"Confirmation Password Does Not Match The Password Above\"\r\n        }\r\n        if (errorMessage != null) {\r\n            // Access the TextInputLayout associated with nameInput\r\n            val nameInputLayout = confirmPasswordInput.parent.parent as TextInputLayout\r\n            nameInputLayout.isErrorEnabled = true\r\n            nameInputLayout.error = errorMessage\r\n        }\r\n        return errorMessage == null\r\n    }\r\n\r\n    override fun onFocusChange(view: View, hasFocus: Boolean) {\r\n        if (view != null) {\r\n            when (view.id) {\r\n                R.id.nameInput -> {\r\n                    if (hasFocus) {\r\n                        // Checking if error is enabled and removing it when focused\r\n                        val nameInputLayout = nameInput.parent.parent as TextInputLayout\r\n                        if (nameInputLayout.isErrorEnabled) {\r\n                            nameInputLayout.isErrorEnabled = false\r\n                        }\r\n                    } else {\r\n                        validateFullName()\r\n                    }\r\n                }\r\n\r\n                R.id.surnameInput -> {\r\n                    if (hasFocus) {\r\n                        // Checking if error is enabled and removing it when focused\r\n                        val nameInputLayout = surnameInput.parent.parent as TextInputLayout\r\n                        if (nameInputLayout.isErrorEnabled) {\r\n                            nameInputLayout.isErrorEnabled = false\r\n                        }\r\n                    } else {\r\n                        validateSurname()\r\n                    }\r\n                }\r\n\r\n                R.id.dateOfBirthInput -> {\r\n                    if (hasFocus) {\r\n                        // Checking if error is enabled and removing it when focused\r\n                        val nameInputLayout = dateOfBirthInput.parent.parent as TextInputLayout\r\n                        if (nameInputLayout.isErrorEnabled) {\r\n                            nameInputLayout.isErrorEnabled = false\r\n                        }\r\n                    } else {\r\n                        CheckForDate()\r\n                    }\r\n                }\r\n\r\n                R.id.emailInput -> {\r\n                    if (hasFocus) {\r\n                        // Checking if error is enabled and removing it when focused\r\n                        val nameInputLayout = emailInput.parent.parent as TextInputLayout\r\n                        if (nameInputLayout.isErrorEnabled) {\r\n                            nameInputLayout.isErrorEnabled = false\r\n                        }\r\n                    } else {\r\n                        validateEmail()\r\n                    }\r\n                }\r\n\r\n                R.id.usernameInput -> {\r\n                    if (hasFocus) {\r\n                        // Checking if error is enabled and removing it when focused\r\n                        val nameInputLayout = usernameInput.parent.parent as TextInputLayout\r\n                        if (nameInputLayout.isErrorEnabled) {\r\n                            nameInputLayout.isErrorEnabled = false\r\n                        }\r\n                    } else {\r\n                        validateUsername()\r\n                    }\r\n                }\r\n\r\n                R.id.passwordInput -> {\r\n                    if (hasFocus) {\r\n                        // Checking if error is enabled and removing it when focused\r\n                        val nameInputLayout = passwordInput.parent.parent as TextInputLayout\r\n                        if (nameInputLayout.isErrorEnabled) {\r\n                            nameInputLayout.isErrorEnabled = false\r\n                        }\r\n                    } else {\r\n                        validatePassword()\r\n                    }\r\n                }\r\n\r\n                R.id.confirmpasswordInput -> {\r\n                    if (hasFocus) {\r\n                        // Checking if error is enabled and removing it when focused\r\n                        val nameInputLayout = confirmPasswordInput.parent.parent as TextInputLayout\r\n                        if (nameInputLayout.isErrorEnabled) {\r\n                            nameInputLayout.isErrorEnabled = false\r\n                        }\r\n                    } else {\r\n                        validateConfirmPassword()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onClick(v: View?) {\r\n    }\r\n\r\n    override fun onKey(v: View?, keyCode: Int, event: KeyEvent?): Boolean {\r\n        return false\r\n    }\r\n}\r\n// Data class to represent user information\r\ndata class Users(val name: String? = null, val surname: String? = null, val age: String? = null, val email: String? = null, val username: String? = null, val password: String? = null)\r\n
===================================================================
diff --git a/app/src/main/java/com/example/timevision_application/Register.kt b/app/src/main/java/com/example/timevision_application/Register.kt
--- a/app/src/main/java/com/example/timevision_application/Register.kt	
+++ b/app/src/main/java/com/example/timevision_application/Register.kt	
@@ -14,11 +14,13 @@
 import com.google.android.material.datepicker.MaterialDatePicker
 import com.google.android.material.textfield.TextInputEditText
 import com.google.android.material.textfield.TextInputLayout
+import com.google.firebase.auth.FirebaseAuth
 import com.google.firebase.database.DatabaseReference
 import com.google.firebase.database.FirebaseDatabase
 import java.util.*
 
-class Register : AppCompatActivity(), View.OnClickListener, View.OnFocusChangeListener, View.OnKeyListener {
+class Register : AppCompatActivity(), View.OnClickListener, View.OnFocusChangeListener,
+    View.OnKeyListener {
     //Declaring Input Fields
     private lateinit var nameInput: TextInputEditText
     private lateinit var dateOfBirthInput: TextInputEditText
@@ -103,7 +105,8 @@
         val minDate = Calendar.getInstance(TimeZone.getTimeZone("UTC")).apply {
             set(Calendar.YEAR, 1900)
         }.timeInMillis // Set minimum date to January 1, 1900
-        val maxDate = MaterialDatePicker.todayInUtcMilliseconds() // Set maximum date to current date (2024)
+        val maxDate =
+            MaterialDatePicker.todayInUtcMilliseconds() // Set maximum date to current date (2024)
         constraintsBuilder.setStart(minDate)
         constraintsBuilder.setEnd(maxDate)
         builder.setCalendarConstraints(constraintsBuilder.build())
@@ -136,14 +139,24 @@
     }
 
     // Method to save user information to the database
-    private fun saveUserToDatabase(name: String, surname: String, email: String, username: String, dateOfBirth: String) {
-        val userId = UUID.randomUUID().toString() // Generate a unique ID for the user
+// Method to save user information to the database
+    private fun saveUserToDatabase(
+        name: String,
+        surname: String,
+        email: String,
+        username: String,
+        dateOfBirth: String
+    ) {
+        val user = FirebaseAuth.getInstance().currentUser
+        user?.let {
+            val userId = user.uid // Use Firebase Authentication user's uid
 
-        // Calculate age
-        val age = calculateAge(dateOfBirth)
+            // Calculate age
+            val age = calculateAge(dateOfBirth)
 
-        val userData = Users(name, surname, age.toString(), email, username, storePassword)
-        database.child("users").child(userId).setValue(userData)
+            val userData = Users(name, surname, age.toString(), email, username, storePassword)
+            database.child("users").child(userId).setValue(userData)
+        }
     }
 
     // Method to calculate age from date of birth
@@ -400,5 +413,13 @@
         return false
     }
 }
+
 // Data class to represent user information
-data class Users(val name: String? = null, val surname: String? = null, val age: String? = null, val email: String? = null, val username: String? = null, val password: String? = null)
+data class Users(
+    val name: String? = null,
+    val surname: String? = null,
+    val age: String? = null,
+    val email: String? = null,
+    val username: String? = null,
+    val password: String? = null
+)
